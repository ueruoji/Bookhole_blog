/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50710
Source Host           : localhost:3306
Source Database       : bookhole_blog

Target Server Type    : MYSQL
Target Server Version : 50710
File Encoding         : 65001

Date: 2017-03-29 00:04:21
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for about_me
-- ----------------------------
DROP TABLE IF EXISTS `about_me`;
CREATE TABLE `about_me` (
  `About_title` varchar(50) DEFAULT NULL,
  `About_text` varchar(255) DEFAULT NULL,
  `About_img` varchar(40) DEFAULT NULL,
  `About_phone` int(11) DEFAULT NULL,
  `About_email` varchar(30) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of about_me
-- ----------------------------

-- ----------------------------
-- Table structure for blogs
-- ----------------------------
DROP TABLE IF EXISTS `blogs`;
CREATE TABLE `blogs` (
  `Blog_id` int(11) NOT NULL,
  `Blog_title` varchar(100) DEFAULT NULL,
  `Blog_text` text,
  `Blog_read` int(11) DEFAULT NULL,
  `Blog_img` varchar(50) DEFAULT NULL,
  `Blog_is` int(11) DEFAULT NULL,
  `Blog_time` varchar(10) DEFAULT NULL,
  `Blog_delete` int(11) DEFAULT NULL,
  `Blog_typeid` int(11) DEFAULT NULL,
  `Blog_abstract` text,
  PRIMARY KEY (`Blog_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blogs
-- ----------------------------
INSERT INTO `blogs` VALUES ('1', 'mysql基本语法', '<p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">创建表&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">create&nbsp;table&nbsp;&lt;表名&gt;(<br/>&nbsp;&lt;字段名&gt; &nbsp;类型(长度) not null&nbsp;primary key auto_increment, **主键<br/>&nbsp;name char(20) not null, &nbsp;<br/>&nbsp;sex int(4) not null<strong style=\"margin: 0px; padding: 0px;\">&nbsp;default</strong>&nbsp;&#39;0&#39;, **默认键<br/>&nbsp;degree double(16,2)</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">)</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">删除表</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">drop table &lt;表名&gt;;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">清空表</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">delete from &lt;表名&gt;;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">插入数据</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">查询表</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">select &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">查询表的前几个字段</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">select * from MyClass order by id limit 0,2;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">查询字段总和</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">select sum(&#39;字段名&#39;) from 表名</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;查询字段 按照升序降序排列</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;降序:select&nbsp; * &nbsp;from &nbsp; 表名 &nbsp; where &nbsp;表达式 &nbsp; order by &nbsp;字段名 &nbsp;desc</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;升序:select&nbsp; *&nbsp;&nbsp;from &nbsp; 表名 &nbsp; where&nbsp; Putout=true&nbsp;&nbsp; order by time &nbsp;asc</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">删除表</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">delete from 表名 where 表达式</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">修改表</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">update 表名 set 字段=新值,… where 条件</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">添加表字段</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">alter table 表名 add 字段 类型 其他;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &lt;1 &nbsp;主键:alter table 表名 add primary key (字段名);</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &lt;2 &nbsp;唯一约束:alter table 表名 add unique 索引名 (字段名);</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">删除表字段</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">alter table 表名 drop 字段名</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><br/></p>', '2', '../images/b1.jpg', '1', '2017.03.21', '0', '2', '包含了基本的mysql的语法，适合初学者学习、查看。');
INSERT INTO `blogs` VALUES ('2', 'git 命令用法、流程操作', '<p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">Git</em></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">是一款免费的、开源的、分布式的版本控制系统。旨在快速高效地处理无论规模大小的任何软件工程。</em></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">每一个 Git克隆 都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。其最大特色就是“分支”及“合并”操作非常快速、简便。</em></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\"><br/></em>第一步 &nbsp;先下载git &nbsp;下面是下载地址</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<a href=\"https://git-scm.com/downloads\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">&nbsp;https://git-scm.com/downloads</a></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第二步 我下载的是Windows 版本， 打开Git Bash Here，在命令行中输入</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cd d: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//进入D盘</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mkdir 文件夹名称 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//创建一个文件夹&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src=\"http://images2015.cnblogs.com/blog/1097056/201702/1097056-20170222110554726-1589521769.png\"/></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第三步 创建一个仓库</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;git init &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//创建库</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img src=\"http://images2015.cnblogs.com/blog/1097056/201702/1097056-20170222112015226-221917514.png\"/></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第四步&nbsp;创建用户名和密码</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git config --global user.name [username]<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git config --global user.email [email]</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">*** 如果git远程仓库中有文件 &nbsp; 可以直接克隆到本地仓库 &nbsp; 不需要前几步</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git clone 地址 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//从git下载代码到本地 &nbsp;注意写自己的地址</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src=\"http://images2015.cnblogs.com/blog/1097056/201702/1097056-20170222120521616-2050099464.png\"/></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第五步 在你创建的库中添加文件 并将文件添加到暂存区</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;git add 文件名字 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//添加到暂存区</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第六步 将暂存区中的文件提交到仓库</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git commit -m &quot;注释信息&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//把文件提交到仓库,后面写上有用的注释信息</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第七步&nbsp;通过命令来查看是否还有文件未提交</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git status &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //查看是否有文件未提交</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第八步 在github中创建自己的库，下面是链接地址</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; https://github.com/</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第九步 创建ssh</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ssh-keygen -t rsa –C &quot;邮箱&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /创建ssh<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 打开c盘 用户中 找到 .ssh 文件夹 打开id_rsa.pub 复制</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;&nbsp;<img src=\"http://images2015.cnblogs.com/blog/1097056/201702/1097056-20170222113528913-1800210847.png\"/></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 并将复制的内容粘贴到key中</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://images2015.cnblogs.com/blog/1097056/201702/1097056-20170222113425788-690467453.png\"/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第十步 &nbsp;创建库</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><img src=\"http://images2015.cnblogs.com/blog/1097056/201702/1097056-20170222113930523-336879183.png\"/></p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第十一步 &nbsp;和远程仓库连接</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git remote add origin 链接 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//和远程仓库进行连接</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">第十一步 &nbsp;将本地仓库推送到远程仓库</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;git push -u origin master &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //第一次推送到远程</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</em>git push origin master &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //以后都这么写</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp;做到这里就大功告成了，现在就可以去github中看到自己添加的东西了！</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 如果在本地推送到仓库有误 &nbsp;想要重新推送的话 &nbsp;请看下面：</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git log &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//命令显示从最近到最远的显示日志<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git reset –hard HEAD^ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //回退到一个版本</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 如果想要回退到某一个版本的话：<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git reflog &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//获取版本号<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git reset –hard 版本号 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//回退到某一个版本</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp;回退完成后就可以重新add 和 commit了</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp;</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp;对于分支的操作：</p><p style=\"margin: 10px auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git checkout -b 分支名字 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//创建并切换分支<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; git branch &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //查看当前分支<br/>&nbsp; &nbsp; 修改完文件之后 然后add commit&nbsp;<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;git checkout master &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//之后切换到主分支<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;git merge &nbsp;分支名字 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //在master分支上合并其他分支<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;git branch -d 分支名字 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //删除分支<br/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;git branch &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//查看分支</p><p><br/></p>', '3', '../images/14014ecf2f3f4359b.jpg', '1', '2017.03.28', '0', '2', 'Git是一款免费的、开源的、分布式的版本控制系统。旨在快速高效地处理无论规模大小的任何软件工程。');
INSERT INTO `blogs` VALUES ('3', 'C#正则表达式语法规则详解', '<p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">（1）“@”符号</strong><br/>“@”表示，跟在它后面的字符串是个“逐字字符串”，不是很好理解，举个例子，以下两个声明是等效的：<br/>string x=&quot;D:\\\\My Huang\\\\My Doc&quot;;<br/>string y = @&quot;D:\\My Huang\\My Doc&quot;;<br/>事实上，如果按如下声明，C#将会报错，因为“\\”在C#中用于实现转义，如“\\n”换行：<br/>string x = &quot;D:\\My Huang\\My Doc&quot;;<br/><br/><strong style=\"margin: 0px; padding: 0px;\">（2）基本的语法字符。</strong><br/>\\d&nbsp; 0-9的数字<br/>\\D&nbsp; \\d的补集（以所以字符为全集，下同），即所有非数字的字符<br/>\\w&nbsp; 单词字符，指大小写字母、0-9的数字、下划线<br/>\\W&nbsp; \\w的补集<br/>\\s&nbsp; 空白字符，包括换行符\\n、回车符\\r、制表符\\t、垂直制表符\\v、换页符\\f<br/>\\S&nbsp; \\s的补集<br/>.&nbsp; 除换行符\\n外的任意字符<br/>[…]&nbsp; 匹配[]内所列出的所有字符<br/>[^…]&nbsp; 匹配非[]内所列出的字符<br/><br/></p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">（3）定位字符</strong><br/>“定位字符”所代表的是一个虚的字符，它代表一个位置，你也可以直观地认为“定位字符”所代表的是某个字符与字符间的那个微小间隙。<br/>^&nbsp; 表示其后的字符必须位于字符串的开始处<br/>$&nbsp; 表示其前面的字符必须位于字符串的结束处<br/>\\b&nbsp; 匹配一个单词的边界<br/>\\B&nbsp; 匹配一个非单词的边界<br/>另外，还包括：\\A&nbsp; 前面的字符必须位于字符处的开始处，\\z&nbsp; 前面的字符必须位于字符串的结束处，\\Z&nbsp; 前面的字符必须位于字符串的结束处，或者位于换行符前<br/><br/></p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp;（4）重复描述字符</strong><br/>“重复描述字符”是体现C#正则表达式“很好很强大”的地方之一：<br/>{n}&nbsp; 匹配前面的字符n次<br/>{n,}&nbsp; 匹配前面的字符n次或多于n次<br/>{n,m}&nbsp; 匹配前面的字符n到m次<br/>?&nbsp; 匹配前面的字符0或1次<br/>+&nbsp; 匹配前面的字符1次或多于1次<br/>*&nbsp; 匹配前面的字符0次或式于0次<br/><br/></p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp;（5）择一匹配</strong><br/>C#正则表达式中的 (|) 符号似乎没有一个专门的称谓，姑且称之为“择一匹配”吧。事实上，像[a-z]也是一种择一匹配，只不过它只能匹配单个字符，而(|)则提供了更大的范围，(ab|xy)表示匹配ab或匹配xy。注意“|”与“()”在此是一个整体。</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp;（6）贪婪与非贪婪</strong><br/>正则表达式的引擎是贪婪，只要模式允许，它将匹配尽可能多的字符。通过在“重复描述字符”（*,+）后面添加“?”，可以将匹配模式改成非贪婪。</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">（7）回溯与非回溯</strong><br/>使用“(?&gt;…)”方式进行非回溯声明。由于正则表达式引擎的贪婪特性，导致它在某些情况下，将进行回溯以获得匹配。</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">（8）正向预搜索、反向预搜索</strong><br/>正向预搜索声明格式：正声明 “(?=…)”，负声明 “(?!...)” ，声明本身不作为最终匹配结果的一部分.</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">反向预搜索声明格式：正声明“(?&lt;=)”，负声明“(?&lt;!)”，声明本身不作为最终匹配结果的一部分。</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">（9）十六进制字符范围</strong><br/>正则表达式中，可以使用 &quot;\\xXX&quot; 和 &quot;\\uXXXX&quot; 表示一个字符（&quot;X&quot; 表示一个十六进制数）形式字符范围：<br/>\\xXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编号在 0到255 范围的字符，比如：空格可以使用 &quot;\\x20&quot; 表示。<br/>\\uXXXX&nbsp;&nbsp; 任何字符可以使用 &quot;\\u&quot; 再加上其编号的4位十六进制数表示，比如：汉字可以使用“[\\u4e00-\\u9fa5]”表示。</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><br/><strong style=\"margin: 0px; padding: 0px;\">（10）对[0,100]的比较完备的匹配</strong><br/>下面是一个比较综合的示例，对于匹配[0,100]，需要特殊考虑的地方包括<br/>*00合法，00.合法，00.00合法，001.100合法<br/>*空字符串不合法，仅小数点不合法，大于100不合法<br/>*数值是可带后缀的，如“1.07f”表示该值为一个float类型（未考虑）</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\">&nbsp;</p><p style=\"margin: 10px auto; white-space: normal; padding: 0px; line-height: 1.5; font-size: 13px; font-family: Verdana, Arial, Helvetica, sans-serif; background-color: rgb(254, 254, 242);\"><strong style=\"margin: 0px; padding: 0px;\">（11）精确匹配有时候是困难的</strong><br/>有些需求要做到精确匹配比较困难，例如：日期、Url、Email地址等，其中一些你甚至需要研究一些专门的文档写出精确完备的表达式，对于这种情况，只能退而求其次，保证比较精确的匹配。例如对于日期，可以基于应用系统的实际情况考虑一段较短的时间，或者对于像Email的匹配，可以只考虑最常见的形式。</p><p><br/></p>', '0', '../images/20160126170100_YuWQP.jpeg', '1', '2017.03.22', '0', '2', '元字符则更加灵活运用通用的表达式匹配所有符合此表达式规律的字符串。');
INSERT INTO `blogs` VALUES ('6', '深入理解多态', '<p>1.继承：如果类A从类B中可以获取到公共信息，那么这种机制称为继承。<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;2.关于base关键字<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base.父类属性<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base.父类方法<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base()<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;3.protected&nbsp;受保护的。在当前类和子类中可以访问。（锁定/限定的对象:类中的变量）<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;4.子类构造揭秘<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;5.继承的两个特性，单根性&nbsp;和&nbsp;传递性(子类的子类可以获取到父类的信息)<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;6.多态：<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多个对象，，，对于同一个操作，做出的响应不同。这种机制称为多态。<br/>&nbsp;&nbsp;&nbsp;&nbsp;7.构成多态的条件<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;父类要有虚方法，子类需要用Override关键字重写虚方法。<br/><br/>7.多态高级&nbsp;&nbsp;&nbsp;Java++<br/>1.多态<br/>&nbsp;&nbsp;里氏替换原则：<br/>&nbsp;&nbsp;&nbsp;&nbsp;子类除了可以具有父类非私有的成员和方法外，还可以<br/>拥有自己特有的成员变量和方法。<br/><br/>&nbsp;<img alt=\"\"/>2.is和as<br/>&nbsp;&nbsp;&nbsp;is做的是类型判定<br/>&nbsp;&nbsp;&nbsp;as做的是类型转换&nbsp;，（）强转。本行code不会有错误，如果转换不了。返回null<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;3.父类的虚方法，在子类中不必强制重写<br/>&nbsp;&nbsp;&nbsp;父类的抽象方法，子类必须强制重写。？<br/>&nbsp;<br/>&nbsp;4.抽象方法实现多态<br/>&nbsp;&nbsp;&nbsp;父类得是抽象类，而且定义了抽象方法<br/>&nbsp;&nbsp;&nbsp;子类必须重写抽象方法<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;5.抽象类和抽象方法注意点：手写（）<br/>&nbsp;&nbsp;&nbsp;1.抽象类使用Abstract关键字修饰。<br/>&nbsp;&nbsp;&nbsp;2.抽象方法只能位于抽象类中。<br/>&nbsp;&nbsp;&nbsp;3.抽象类不能实例化&nbsp;<br/>&nbsp;&nbsp;&nbsp;4.抽象方法不能有方法体，甚至连{}都没有&nbsp;<br/>&nbsp;&nbsp;&nbsp;5.抽象类不能是静态类或者密封类<br/>&nbsp;&nbsp;&nbsp;6.子类必须重写抽象类中的所有抽象方法，除非子类本身也是一个抽象类<br/>&nbsp;&nbsp;&nbsp;7.抽象类中可以有普通方法<br/>&nbsp;&nbsp;&nbsp;8.抽象类可以有构造函数<br/>&nbsp;&nbsp;&nbsp;9.重写所有抽象方法的快捷键是Ctrl+.<br/>&nbsp;&nbsp;&nbsp;10.抽象类中抽象方法就是用来约束子类方法形式（签名）的<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;原理要解：抽象类其实是可以实例化的，但是他的实例化方式不是通过new方式来创建对象，<br/>&nbsp;&nbsp;&nbsp;而是通过父类的引用来指向子类的实例来间接地实现父类的实例化<br/>&nbsp;&nbsp;&nbsp;（因为子类要实例化前，一定会先实例化他的父类。这样创建了继承抽象类的子类的对象，<br/>&nbsp;&nbsp;&nbsp;也就把其父类（抽象类）给实例化了）.<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;结论：抽象类是可以实例化的，不能通过new实例化，可以通过子类构造自动调度父类构造实例化<br/>&nbsp;6.接口<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目中业务必须使用接口。<br/>&nbsp;&nbsp;后来：接口就一个用Interface&nbsp;修饰的东东。&nbsp;+++++++++++++++++++++++++开发中的接口<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;1.接口也是一种数据类型<br/>&nbsp;&nbsp;2.案例：飞机和小鸟都能飞，他们都实现了IFly这个接口。但是他们飞翔的方式不同。这也是多态的一种实现方案<br/>&nbsp;&nbsp;	&nbsp;&nbsp;&nbsp;&nbsp;一个类实现一个接口&nbsp;100个方法&nbsp;，其中只有一个方法必须要实现的。<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;.method&nbsp;public&nbsp;hidebysig&nbsp;newslot&nbsp;abstract&nbsp;virtual&nbsp;instance&nbsp;void&nbsp;Fly()&nbsp;cil&nbsp;managed<br/>&nbsp;&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.接口污染<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;4.一个类实现N个接口，就是之前我们提到的变相的多继承。<br/>&nbsp;&nbsp;&nbsp;类和接口：类实现接口<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;接口和接口&nbsp;：继承<br/>&nbsp;&nbsp;&nbsp;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.父类变量指向子类对象<br/>&nbsp;&nbsp;&nbsp;&nbsp;Typer和Coder</p>', null, '../images/19669096_1365476984995.jpg', '1', '2017.03.25', '0', '3', '抽象类其实是可以实例化的，但是他的实例化方式不是通过new方式来创建对象');
INSERT INTO `blogs` VALUES ('7', '[c#]cookie详解(一)', '<p>在新技术大军横空出世年代, Cookie 似乎已被遗忘. 但网页设计中依然少不了它的身影, 这里就本人多年对它的应用做以总结, 可能不是最全面的, 但一定是最实用的.<br/>&nbsp;&nbsp;&nbsp;Cookie早已不是不可替代, 不是必不可少, 也因此失去了很多色彩, 很多人把它形容为一鸡肋，食之无味, 弃之可惜. 但若都以此评判, 似乎我们很多技术都很无味, 而似乎都不可缺少. 以我看来, 技术最好少做对比, 选择多了, 困惑也就多了, 心不静, 看什么都是有用而无味. 我却觉得很多技术自己用的得心应手了自然就有了味道.<br/>&nbsp;&nbsp;&nbsp;总结大家对 Cookie &quot;食之无味&quot; 大概有以下几个原因.</p><p>&nbsp;&nbsp;&nbsp;(1). 不安全, 这是最直接的一个原因, 因为 Cookie 是保存在客户端计算机上的, 因此很容易被修改, 从而导致访问服务器时应用程序的执行失败或者其他安全问题.<br/>&nbsp;&nbsp;&nbsp;(2). 严重限制传送内容的大小, 这是最实现的一个原因, 大多数浏览器都限制 Cookie 的大小, 一般情况下都不能超过 4096 个字节, 因此传送的内容有限.<br/>&nbsp;&nbsp;&nbsp;(3). 用户可控制 Cookie 的开启与停用: 这是最无奈的一个原因, 当用户设置其浏览器停止接收 Cookie时, 如此, 它便失去了作用.<br/>&nbsp;&nbsp;&nbsp;(4). .......<br/>&nbsp;&nbsp;&nbsp;虽已为鸡肋，但弃之总会可惜, 原因也无非下列几个原由.<br/>&nbsp;&nbsp;&nbsp;(1). 使用简单:　因为使用太简单了,　所以它能活至今日, 虽有不少人一边天天抱怨, 一边却又偷偷地用它. Cookie 的简单是源于它是最简单的 索引键值 的文本结构, 读取与设置数据非常方便.<br/>&nbsp;&nbsp;&nbsp;(2). 不占用任何服务器资源: Cookie 的生成原理是由服务器创建后随网页一起输入到客户端, 并且在驻留在客户端计算机上, 因此不需要占用服务器的任何资源.<br/>&nbsp;&nbsp;&nbsp;(3). 有效期限可随意设置: 随心所欲地设置有效期限使它相当好用, 可以设置当浏览器结束访问时, Cookie 随之消失, 或者设置某个特点的到期时间, 甚至是永久保存在计算机上.<br/>&nbsp;&nbsp;&nbsp;(4). .......<br/>&nbsp;&nbsp;&nbsp;OK, 是福是祸, 人各有志, 暂且放下不谈. 这里我总结出了 Cookie 在网页设计中各个方面所起的作用和使用方法. 还是那句话, 可能不是最全的, 但一定是最实用的. 与大家分享. 好, 这里就从最简单的使用开始.<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;1. Cookie 可以存储哪些值<br/>&nbsp;&nbsp;&nbsp;在 Cookie 中只能存储个人可识别信息. 个人可识别信息是指可以用来识别或联系用户的信息. 例如用户的姓名, 电子邮件, 家庭住址等. 必须强调的是, 这些可识别信息必须是非机密或重要信息.<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;2. 使用 Cookie 对象保存和读取客户端信息.<br/>&nbsp;&nbsp;&nbsp;要存储一个 Cookie 变量, 可以通过 Response 对象的 Cookie 集合, 语法如下:<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[varName].Value=值；<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;其中, varName 为变量名.<br/>&nbsp;&nbsp;&nbsp;要取回 Cookie, 可以使用 Request 对象的 Cookie 集合, 并将指定的 Cookie 集合返回, 语法如下 :<br/>&nbsp;&nbsp;&nbsp;变量名=Request.Cookies[varName].Value;<br/>&nbsp;&nbsp;&nbsp;以例为例: 用 Cookie 操作客户端 IP. 代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//保存客户端信息<br/>&nbsp;&nbsp;&nbsp;string UserIP = Request.UserHostAddress.ToString();//获取客户端的IP地址<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;IP&quot;].Value = UserIP;//将客户端的IP地址保存在Cookies对象中<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;IP&quot;].Expires = DateTime.MaxValue;//设计Cookies的失效期<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//读取<br/>&nbsp;&nbsp;&nbsp;Response.Write(Request.Cookies[&quot;IP&quot;].Value);//从Cookies中读取客户端IP地址值<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;3. 加密 Cookie 中的数据<br/>&nbsp;&nbsp;&nbsp;为了避免用户信息被他人窃取, 增强网站的安全性, 通常需要对 Cookie 中的数据进行加密, 加密代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;string data = &quot;对Cookie中的数据加密。&quot;;<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;data&quot;].Value = FormsAuthentication.HashPasswordForStoringInConfigFile(data, &quot;md5&quot;);<br/>&nbsp;&nbsp;&nbsp;Response.Write(Request.Cookies[&quot;data&quot;].Value);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;4. 使用 Cookie 对象在页面之间传值.<br/>&nbsp;&nbsp;&nbsp;使用 Cookie 对象在页面之间传值与使用 Session 对象在页面之间传值的方法一样, 但两者有本质区别. 即Cookie 是存放在客户端的, 而 Session 是存放在服务器端的. Cookie 在使用时, 还需要配合 Asp.net 内置对象 Request.<br/>&nbsp;&nbsp;&nbsp;使用 Cookie 对象传送信息的代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;if (txtName.Text == &quot;A&quot; &amp;&amp; txtPassword.Text == &quot;a&quot;)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;HttpCookie newCookie = new HttpCookie(&quot;UserName&quot;);<br/>&nbsp;&nbsp;&nbsp;newCookie.Value = txtName.Text.Trim();<br/>&nbsp;&nbsp;&nbsp;Response.AppendCookie(newCookie);<br/>&nbsp;&nbsp;&nbsp;Server.Transfer(&quot;B.aspx&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;登录失败!&#39;);&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;在 目标页面 (B.aspx)中, 接收 Cookie 对象传来的值, 并将其显示在界面上, 代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;Label1.Text = Request.Cookies[&quot;UserName&quot;].Value.ToString();<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;5. 使用 Cookie 验证用户登录.<br/>&nbsp;&nbsp;&nbsp;使用 Cookie 来验证用户登录, 首先需要将登录信息保存在 Cookie 对象中, 然后读取并验证.<br/>&nbsp;&nbsp;&nbsp;以例为例, 当用户注册时 ( 当然很多情况下也可以是用户退出系统 ), 将用户和用户密码保存在 Cookie 对象中, 代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;SavedLogin&quot;][&quot;UserName&quot;] =txtName.Text.Trim();<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;SavedLogin&quot;][&quot;UserPwd&quot;] = txtPassword.Text.Trim();<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;SavedLogin&quot;].Expires = DateTime.Now.AddDays(1);<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;注册成功！&#39;);location=&#39;Default.aspx&#39;;&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;而当用户登录时, 首先判断 Cookie 对象是否失效, 如果没有失效, 则判断用户输入的信息与 Cookie 对象中保存的信息是否一致, 如果一致, 就进行其他操作. 代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;if (Request.Cookies[&quot;SavedLogin&quot;] == null)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;Cookie 失效！&#39;);location=&#39;Default.aspx&#39;;&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;if (txtName.Text == Request.Cookies[&quot;SavedLogin&quot;]<br/>&nbsp;&nbsp;&nbsp;[&quot;UserName&quot;].ToString() &amp;&amp; txtPassword.Text ==<br/>&nbsp;&nbsp;&nbsp;Request.Cookies[&quot;SavedLogin&quot;][&quot;UserPwd&quot;].ToString())<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Session[&quot;UserName&quot;] = txtName.Text.Trim();<br/>&nbsp;&nbsp;&nbsp;Response.Redirect(&quot;NavigatePage.aspx&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;登录失败!&#39;)&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;6. 创建及存取多个键值的 Cookie 对象.<br/>&nbsp;&nbsp;&nbsp;多键值的应用其实是一种 &quot;分类&quot; 思想, 把某一类信息存储在一起. 实现方法是<br/>&nbsp;&nbsp;&nbsp;使用 Response 对象可以创建多个数据值的 Cookie, 语法如下:<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;CookieName&quot;][&quot;KeyName&quot;]=&quot;Cookie中相对索引键的值&quot;;<br/>&nbsp;&nbsp;&nbsp;例如, 使用多键值保存用户名与密码. 代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;if (txtName.Text == &quot;A&quot; &amp;&amp; txtPassword.Text == &quot;a&quot;)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;UserInfo&quot;][&quot;UserName&quot;] = this.txtName.Text.Trim();<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;UserInfo&quot;][&quot;UserPwd&quot;] = this.txtPassword.Text.Trim();<br/>&nbsp;&nbsp;&nbsp;Response.Redirect(&quot;B.aspx&quot;);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;登录失败!&#39;);&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;当发出网页请求时, 浏览器会将 Cookie 信息发送到服务器. 在服务器端, 可以使用 Request 对象来存取 Cookie中的数据值. 语法格式有以下3种形式.<br/>&nbsp;&nbsp;&nbsp;方法一: 直接取出数据值<br/>&nbsp;&nbsp;&nbsp;stirng str1=Response.Cookies[&quot;CookieName&quot;][&quot;KeyName&quot;];<br/>&nbsp;&nbsp;&nbsp;方法二: 利用索引来取出数据值<br/>&nbsp;&nbsp;&nbsp;string str2=Response.Cookies[&quot;CookieName&quot;].Values[1];<br/>&nbsp;&nbsp;&nbsp;方法三: 利用索引键名来取出数据值.<br/>&nbsp;&nbsp;&nbsp;string str3=Response.Cookies[&quot;CookieName&quot;].Values[&quot;KeyName&quot;];</p><p><br/></p><p>7. 遍历 Cookie 集合<br/>&nbsp;&nbsp;&nbsp;此处以实例演示说明: 如何遍历客户端的 Cookie 对象, 并将客户端的所有 Cookie 对象的内容值显示出来. 代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;string[] cookieName, keyName;//定义两个数组，用来存放名称<br/>&nbsp;&nbsp;&nbsp;HttpCookieCollection myCookieCollection;//定义Cookies集合对象<br/>&nbsp;&nbsp;&nbsp;HttpCookie myCookie;//定义Cookie对象<br/>&nbsp;&nbsp;&nbsp;myCookieCollection = Request.Cookies;//将客户端的Cookie取出<br/>&nbsp;&nbsp;&nbsp;cookieName = myCookieCollection.AllKeys;//取得集合中所有的Cookie名称<br/>&nbsp;&nbsp;&nbsp;for (int i=0; i &lt;= cookieName.GetUpperBound(0); i++)//对每个Cookie进行循环<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;myCookie =myCookieCollection[cookieName[i]];<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;该Cookie的名称：&quot;+myCookie.Name +&quot;&lt;br&gt;&quot;+&quot;该Cookie的到期时间：&quot;+myCookie.Expires+&quot;&lt;br&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;该Cookie中所有的内容值如下所示：&quot;+&quot;&lt;br&gt;&quot;);//输出Cookie内容<br/>&nbsp;&nbsp;&nbsp;keyName = myCookie.Values.AllKeys;<br/>&nbsp;&nbsp;&nbsp;for (int j = 0; j &lt;= keyName.GetUpperBound(0); j++)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(keyName[j]+&quot;：&quot;+myCookie[keyName[j]]+&quot;&lt;br&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;hr&gt;&quot;);&nbsp;&nbsp;</p>', null, '../images/b2.jpg', '1', '2017.03.28', '0', '1', '在新技术大军横空出世年代, Cookie 似乎已被遗忘. 但网页设计中依然少不了它的身影,。');
INSERT INTO `blogs` VALUES ('8', '[c#]cookie详解（二）', '<p>&nbsp;&nbsp;8. 设置 Cookie 变量的的生命周期<br/>&nbsp;&nbsp;&nbsp;虽然 Cookie 对象变量是存放在客户端计算机上, 但是也不是永远不会消失. 设计人员在程序中设定 Cookie 对象的有效日期, 语法如下:<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;CookieName&quot;].Expires=日期；<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;如果没有指定效期 ( Expires 属性), Cookie 变量将不会被保存. 当关闭浏览器时, Cookie 变量也会随之消失.<br/>&nbsp;&nbsp;&nbsp;这里演示几种设定有效期的方法.<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//20分钟后到期<br/>&nbsp;&nbsp;&nbsp;TimeSpan ts=new TimeSpan(0, 0, 20, 0);<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;myCookie&quot;].Expires=DateTime.Now.Add(ts);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//一个月后到期<br/>&nbsp;&nbsp;&nbsp;Response.Cookie[&quot;myCookie&quot;].Expires=DateTime.Now.AddMouths(1);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//指定具体有效日期<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;myCookie&quot;].Expires=DateTime.Parse(&quot;2010-10-1&quot;);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//永远不过期<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;myCookie&quot;].Expires=DateTime.MaxValue;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//关闭浏览器后过期<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;myCookie&quot;].Expires=DateTime.MinValue;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;9. 删除客户端的 Cookie.<br/>&nbsp;&nbsp;&nbsp;删除客户端的 Cookie 主要是设置指定 Cookies 的有效期, 有以下两种方式.<br/>&nbsp;&nbsp;&nbsp;方法一: 将指定 Cookie 的有效期设置为过去的某个时间. 例如, 设置 Cookie 有效期为当前系统时间的前一天, 代码如下:<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;myCookie&quot;].Expires=DateTime.Now.AddDays(-1);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;方法二: 将指定 Cookie 的有效期设置为最小值 ( MinValue). 当浏览器关闭时, 相关 Cookies 失效. 代码如下:<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;myCookie&quot;].Expires=DateTime.MinValue;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;10. 删除多值 Cookie 中的某个值.<br/>&nbsp;&nbsp;&nbsp;使用 Remove方法. 相关代码正下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;if (txtval1.Text != &quot;&quot; &amp;&amp; txtval2.Text != &quot;&quot;)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;HttpCookie hc = Request.Cookies[&quot;Val&quot;];<br/>&nbsp;&nbsp;&nbsp;hc.Values.Remove(&quot;val2&quot;);<br/>&nbsp;&nbsp;&nbsp;Response.Cookies.Add(hc);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;请先输入变量值！&quot;);<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;11. 使用 Cookie 防止网上重复投票<br/>&nbsp;&nbsp;&nbsp;Cookie提供了一种在 Web 应用程序中存储用户特定信息的方法. 例如, 当用户第一次浏览 Web 站点时, Cookie将会记下用户登录 IP地址, 在Cookie 的有效期内, 当该用户再次发出浏览此 Web 站点中页面的请示时, 浏览器就会和服务器交换 Cookie信息, 识别该用户的身份.<br/>&nbsp;&nbsp;&nbsp;这里制作一个简单的程序. 使用 Cookie 的这个特性防止重复投票.<br/>&nbsp;&nbsp;&nbsp;实现方法是, 将客户端的 IP 地址保存在 Cookie 对象中, 主要代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//判断指定的IP是否已投过票了,如果已经投过了,则弹出提示对话框<br/>&nbsp;&nbsp;&nbsp;string UserIP = Request.UserHostAddress.ToString();<br/>&nbsp;&nbsp;&nbsp;int VoteID = Convert.ToInt32(RadioButtonList1.SelectedIndex.ToString())+1;<br/>&nbsp;&nbsp;&nbsp;//获取名为userIP的Cookie对象<br/>&nbsp;&nbsp;&nbsp;HttpCookie oldCookie=Request.Cookies[&quot;userIP&quot;];<br/>&nbsp;&nbsp;&nbsp;//判断该Cookie对象是否存在<br/>&nbsp;&nbsp;&nbsp;if (oldCookie == null)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;UpdateVote(VoteID);<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;投票成功，谢谢您的参与！&#39;)&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;//定义新的Cookie对象<br/>&nbsp;&nbsp;&nbsp;HttpCookie newCookie = new HttpCookie(&quot;userIP&quot;);<br/>&nbsp;&nbsp;&nbsp;newCookie.Expires = DateTime.MinValue;<br/>&nbsp;&nbsp;&nbsp;//添加新的Cookie变量IPaddress，值为UserIP<br/>&nbsp;&nbsp;&nbsp;newCookie.Values.Add(&quot;IPaddress&quot;, UserIP);<br/>&nbsp;&nbsp;&nbsp;//将变量写入Cookie文件中<br/>&nbsp;&nbsp;&nbsp;Response.AppendCookie(newCookie);<br/>&nbsp;&nbsp;&nbsp;return;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;然后从Cookie中获取客户端的IP地址并判断该IP地址是否已访问过网站, 如果已访问过, 则弹出提示框, 提示用户, 主要代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;//从Cookie中获取客户端IP地址<br/>&nbsp;&nbsp;&nbsp;string userIP = oldCookie.Values[&quot;IPaddress&quot;];<br/>&nbsp;&nbsp;&nbsp;if (UserIP.Trim() == userIP.Trim())<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;一个IP地址只能投一次票，谢谢您的参与！&#39;);history.go(-1);&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;return;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;//创建 HttpCookie 类型的对象并为它分配名称为userID<br/>&nbsp;&nbsp;&nbsp;HttpCookie newCookie = new HttpCookie(&quot;userIP&quot;);<br/>&nbsp;&nbsp;&nbsp;//为 Cookie 的子项赋值，即将客户端IP地址赋给Cookie的子项,并将其命名为IPaddress<br/>&nbsp;&nbsp;&nbsp;newCookie.Values.Add(&quot;IPaddress&quot;, UserIP);<br/>&nbsp;&nbsp;&nbsp;//设置所有 Cookie失效期<br/>&nbsp;&nbsp;&nbsp;newCookie.Expires = DateTime.MinValue;<br/>&nbsp;&nbsp;&nbsp;//将该 Cookie 添加到 Cookies 集合中<br/>&nbsp;&nbsp;&nbsp;Response.Cookies.Add(newCookie);<br/>&nbsp;&nbsp;&nbsp;//Response.AppendCookie(newCookie);<br/>&nbsp;&nbsp;&nbsp;UpdateVote(VoteID);<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;投票成功，谢谢您的参与！&#39;)&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;return;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;12. 使用 Cookie 实现自动登录<br/>&nbsp;&nbsp;&nbsp;一般网站都会提供自动登录服务, 简单的说就是你第一次(或某一次)登录成功后在某个时间段内不需要再输入用户名或密码进行登录.<br/>&nbsp;&nbsp;&nbsp;这很网站会提供给用户一个选择时间段的服务. 下面这个演示示例中, 用户可以在两个星期内, 登录时不再要求输入密码.<br/>&nbsp;&nbsp;&nbsp;代码如下:<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;if (Request.Cookies[&quot;UserName&quot;] != null)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Redirect(&quot;B.aspx?UserName=&quot; + Request.Cookies[&quot;UserName&quot;].Value);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;if(this.txtName.Text==&quot;A&quot;&amp;&amp;this.txtPassword.Text==&quot;a&quot;)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;if (CheckBox1.Checked == true)<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;UserName&quot;].Value = System.Web.HttpUtility.UrlEncode(txtName.Text);<br/>&nbsp;&nbsp;&nbsp;Response.Cookies[&quot;UserName&quot;].Expires = DateTime.Now.AddDays(14);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;Response.Redirect(&quot;B.aspx?UserName=&quot; + System.Web.HttpUtility.UrlEncode(txtName.Text));<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;else<br/>&nbsp;&nbsp;&nbsp;{<br/>&nbsp;&nbsp;&nbsp;Response.Write(&quot;&lt;script&gt;alert(&#39;输入出错！&#39;)&lt;/script&gt;&quot;);<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;13. 使用 Cookie 实现单点登录<br/>&nbsp;&nbsp;&nbsp;单点登录( Single Sign On, SSO)是目前比较流行的企业业务整合的解决方案之一. 简单的说, 就是每个客户端对每个网站同时只能打开一个. 这样最大的好处是可以缓解服务器的压力. 一般在企业网站中较为常见. 因为门户网站, 社区博客等希望你打开的越多越好, 不会设置单点登录.</p>', null, '../images/1438305503813817.jpg', '1', '2017.03.28', '0', '1', '这里就本人多年对它的应用做以总结, 可能不是最全面的, 但一定是最实用的.');

-- ----------------------------
-- Table structure for blog_type
-- ----------------------------
DROP TABLE IF EXISTS `blog_type`;
CREATE TABLE `blog_type` (
  `Type_id` int(11) NOT NULL,
  `Type_name` varchar(5) DEFAULT NULL,
  `Type_percentage` int(3) DEFAULT NULL,
  PRIMARY KEY (`Type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_type
-- ----------------------------
INSERT INTO `blog_type` VALUES ('1', 'C#', '30');
INSERT INTO `blog_type` VALUES ('2', '.NET', '50');
INSERT INTO `blog_type` VALUES ('3', '其他', '20');

-- ----------------------------
-- Table structure for houtai_login
-- ----------------------------
DROP TABLE IF EXISTS `houtai_login`;
CREATE TABLE `houtai_login` (
  `houtai_id` int(11) NOT NULL,
  `houtai_pwd` varchar(255) DEFAULT NULL,
  `houtai_level` int(11) DEFAULT NULL COMMENT '等级权限',
  PRIMARY KEY (`houtai_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of houtai_login
-- ----------------------------
INSERT INTO `houtai_login` VALUES ('198', 'rryyhh', '1');
INSERT INTO `houtai_login` VALUES ('1981237035', 'ryh', '2');

-- ----------------------------
-- Table structure for img
-- ----------------------------
DROP TABLE IF EXISTS `img`;
CREATE TABLE `img` (
  `Img_id` int(11) NOT NULL,
  `Img_address` varchar(255) DEFAULT NULL,
  `Img_text` varchar(255) DEFAULT NULL,
  `Img_is` int(11) DEFAULT NULL,
  PRIMARY KEY (`Img_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of img
-- ----------------------------
INSERT INTO `img` VALUES ('1', '../images/1.jpg', '爱是一把手中的细沙，握得越紧，流得越快，最后，会一无所有。', '1');
INSERT INTO `img` VALUES ('2', '../images/2.jpg', '爱到深处，原来是寂寞。', '1');
INSERT INTO `img` VALUES ('3', '../images/3.jpg', '面对大河我无限惭愧 \r\n我年华虚度 空有一身疲倦 ', '1');
INSERT INTO `img` VALUES ('4', '../images/4.jpg', '这是惟一的，最后的，抒情\n这是惟一的，最后的，草原', '1');
INSERT INTO `img` VALUES ('5', '../images/5.jpg', '自君之出矣，明镜暗不治。思君如流水，何有穷已时。', '1');
INSERT INTO `img` VALUES ('6', '../images/6.jpg', '欲把相思说似谁，浅情人不知', '1');

-- ----------------------------
-- Table structure for tell
-- ----------------------------
DROP TABLE IF EXISTS `tell`;
CREATE TABLE `tell` (
  `Tell_blogid` int(11) DEFAULT NULL,
  `Tell_userid` int(11) DEFAULT NULL,
  `Tell_text` varchar(255) DEFAULT NULL,
  `Tell_time` varchar(255) DEFAULT NULL,
  `Tell_id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Tell_id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tell
-- ----------------------------
INSERT INTO `tell` VALUES ('7', '1981237035', '写的非常棒！学到了很多知识！！！', null, '1');
INSERT INTO `tell` VALUES ('2', '1981237035', 'git流程表现的很清楚，按照图解，很轻松的上传了！', null, '2');
INSERT INTO `tell` VALUES ('1', '1536921750', 'Mysql数据库入门了，写的很详细，以后回来查阅也很方便，希望以后多多更新', null, '3');
INSERT INTO `tell` VALUES ('3', '1536921750', '正则表达式写的很好，很清楚，学到了，分类分的很好，看起来也很容易。', null, '4');
INSERT INTO `tell` VALUES ('6', '1981237035', '对于多态和继承我自己学的很不好，以后会回来多看看。', null, '5');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `User_id` int(11) NOT NULL,
  `User_name` varchar(20) DEFAULT NULL,
  `User_pwd` varchar(20) DEFAULT NULL,
  `User_img` varchar(50) DEFAULT NULL,
  `User_qq` int(11) DEFAULT NULL,
  `User_phone` int(11) DEFAULT NULL,
  PRIMARY KEY (`User_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('123', '123', '123', null, null, '123');
INSERT INTO `user` VALUES ('1536921750', '旧事莫提', 'ryh15034686832hh', '../images/m_02.jpg', '346923676', '1536921750');
INSERT INTO `user` VALUES ('1981237035', '往事随风', 'ryh', '../images/m_01.jpg', '1981237035', '1536921750');
